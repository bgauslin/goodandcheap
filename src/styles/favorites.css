/* -------------------------------------------------------------------------- */
/* Favorites view via a <button> that toggles a <dialog>. */
/* -------------------------------------------------------------------------- */

/**
 * [1] The 'display' override lets us place the <button> within its parent
 *     header's grid.
 */
gc-favorites {
  display: contents;  /* [1] */

  /*
   * Open/close button.
   */
  .toggle {
    cursor: pointer;
    display: grid;
    grid: 'count button' auto / auto;
    grid-area: favorites;
    place-self: center end;
    place-items: center;
  }

  .favorite--toggle, .close {
    grid-area: button;
  }

  .toggle .count {
    background-color: var(--brand-color);
    block-size: 1rem;
    border-radius: 1rem;
    color: var(--text-color-inverted);
    display: grid;
    grid-area: count;
    margin-inline: auto -.375rem;
    min-inline-size: 1rem;
    padding-inline: .3em;
    place-content: center;
    letter-spacing: 0;
  }

  /**
   * The <dialog> is full-screen with a .dialog element that mimics the layout
   * of the <main> element. Within the .dialog element is the .content element
   * which actually behaves like a modal dialog. This nesting allows us to
   * adopt the layout of the rest of the app and apply transitions to the modal.
   *
   * [1] Override to enable transitions.
   * [2] Browser overrides for fullscreen layout.
   * [3] Ensure <dialog> is hidden since it also has a 'display' override.
   */
  dialog {
    background: none;
    block-size: 100dvh;
    border: none;
    color: inherit;
    display: grid;  /* [1] */
    grid: var(--app-grid);
    inline-size: 100dvw;
    margin: 0;
    max-block-size: 100dvh;  /* [2] */
    max-inline-size: 100dvw;  /* [2] */
    outline: none;
    overflow: auto;
    padding: 0;
    
    &:not([open]) {
      display: none;  /* [3] */
    }
  
    &::backdrop {
      background: none;
    }
  }

  /**
   * Hide scrollbars for both the .dialog and .content elements.
   */
  .dialog,
  .content {
    overflow: auto;
    scrollbar-width: none;

    &::-webkit-scrollbar {
      display: none;
    }
  }

  /**
   * Container element whose layout mimics the <main> element.
   */
  .dialog {
    grid-area: 2 / 2;
  }

  /**
   * Modal element with transitions applied to it.
   */
  .content {
    aspect-ratio: var(--dialog-content-aspect-ratio);
    background-color: var(--content-background);
    border: var(--dialog-border);
    border-block-start: var(--dialog-border-top);
    border-radius: var(--dialog-border-radius);
    display: grid;
    grid: var(--dialog-content-grid);
    min-block-size: 100%;
    transition: transform var(--transition);
  }

  dialog[inert] .content {
    transform: translateY(100%);
  }

  /**
   * Layout container for the heading.
   */
  .meta {
    aspect-ratio: var(--dialog-meta-aspect-ratio);
    border-block-end: var(--dialog-meta-border-block);
    border-inline-end: var(--dialog-meta-border-inline);
    display: grid;
    grid-area: meta;
    grid: 1fr / 1fr;
    inset-block: var(--dialog-meta-inset, initial);
    overflow: hidden;
    place-self: var(--dialog-meta-place-self);
    position: var(--dialog-meta-position, static);
  }

  h1 {
    margin: 0;
    padding-block: 1rem;
    place-self: center;
    pointer-events: none;
    text-align: center;
  }

  /**
   * Previews of favorited recipes.
   */
  .previews {
    border-block-end: 1px solid var(--border-color);
    grid-area: previews;
    place-self: start stretch;
  }

  .previews__item:first-child {
    border-block-start: none;
  }
}
